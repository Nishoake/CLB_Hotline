{"version":3,"sources":["services/newUser.js","components/CForm.js","components/Header.js","components/SolidHeader.js","components/Question.js","components/Blurb.js","components/Footer.js","App.js","index.js"],"names":["addUser","info","a","mainNumber","phoneNumber","number","concat","user","name","firstname","axios","post","response","data","CForm","ref","useRef","formFields","useEffect","newUserInfo","cf","getFormData","newUser","addRobotChatResponse","secret","ConversationalForm","startTheConversation","options","theme","context","current","preventAutoFocus","submitCallback","userImage","robotImage","userInterfaceOptions","robot","loadExternalStyleSheet","tags","remove","className","Header","title","SolidHeader","Question","question","Blurb","blurb","Footer","icon","link","label","href","App","propsTop","useSpring","opacity","from","config","duration","propsMiddle","propsBottom","div","style","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAqBe,GAAEA,QAjBJ,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,4DACC,KACXC,EAAaF,EAAKG,YAClBC,EAFW,KAEKC,OAAOH,GAEvBI,EAAO,CACTC,KAAMP,EAAKQ,UACXJ,OAAQA,GAPI,SAWSK,IAAMC,KAdf,OAc6BJ,GAX7B,cAWRK,EAXQ,yBAYPA,EAASC,MAZF,2CAAH,uD,KCCE,SAASC,IACtB,IAAMC,EAAMC,mBAGNC,EAAa,CACjB,CACE,IAAO,mBACP,KAAQ,OACR,KAAQ,aACR,eAAgB,+DAElB,CACE,IAAO,mBACP,KAAQ,OACR,KAAQ,aACR,eAAgB,wFAElB,CACE,IAAO,mBACP,KAAQ,OACR,KAAQ,aACR,eAAgB,iGAmBlB,CACE,IAAO,QACP,KAAQ,OACR,KAAQ,YACR,GAAM,YACN,SAAY,GACZ,UAAa,IACb,UAAa,KACb,eAAgB,qDAChB,uBAAwB,cACxB,WAAY,qBAGd,CACE,IAAO,mBACP,KAAQ,OACR,KAAQ,aACR,eAAgB,6CAChB,0BAA2B,OAE7B,CACE,IAAO,QACP,KAAQ,MACR,QAAW,YACX,KAAQ,cACR,GAAM,cACN,SAAY,GACZ,UAAa,KACb,UAAa,KACb,eAAgB,kDAChB,uBAAwB,0BACxB,WAAY,6BAEd,CACE,IAAO,mBACP,KAAQ,OACR,KAAQ,wBACR,eAAgB,sFAmEpB,OAzDAC,qBAAU,WAAiB,4CAGzB,8BAAAhB,EAAA,6DACMiB,EAAcC,EAAGC,aAAY,GADnC,SAGuBC,EAAQtB,QAAQmB,GAHvC,OAKmB,oBAFbP,EAHN,SAMIQ,EAAGG,qBAAqB,uIACxBH,EAAGG,qBAAqB,8FACF,sBAAbX,GACTQ,EAAGG,qBAAqB,0DACxBH,EAAGG,qBAAqB,sEACxBH,EAAGG,qBAAqB,oFAExBH,EAAGG,qBAAqB,gDACxBH,EAAGG,qBAAH,iDAAkEX,EAASY,OAA3E,0BACAJ,EAAGG,qBAAH,0DAA2EX,EAASY,OAApF,oBAIAJ,EAAGG,qBAAqB,mFAnB5B,4CAHyB,sBA0BzB,IAAIH,EAAKK,qBAAmBC,qBAAqB,CAC/CC,QAAS,CACPC,MAAO,OACPC,QAASd,EAAIe,QACbC,kBAAkB,EAGlBC,eAAgB,YAjCK,mCAiCEA,IACvBC,UAAW,+EACXC,WAAY,sCACZC,qBAAsB,CACpBC,MAAO,IAOTC,wBAAwB,GAE1BC,KAAMrB,IAKR,OAAO,WACLG,EAAGmB,YAEJ,CAACtB,IAIA,yBAAKuB,UAAU,QAAQzB,IAAKA,I,WC7InB0B,EANA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OACE,wBAAIF,UAAU,eAAc,2BAAIE,KCIrBC,EANK,SAAC,GAAe,IAAbD,EAAY,EAAZA,MACrB,OACE,wBAAIF,UAAU,aAAY,2BAAIE,KCInBE,EANE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,wBAAIL,UAAU,YAAW,2BAAIK,KCElBC,EAJD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OAAO,uBAAGP,UAAU,YAAYO,ICQnBC,EATA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC5B,OACE,yBAAKX,UAAU,QACb,uBAAGY,KAAMF,GAAM,uBAAGV,UAAWS,KAC7B,2BAAIE,KCoDKE,MAjDf,WAGE,IAAMC,EAAWC,YAAU,CAAEC,QAAS,EAAGC,KAAM,CAAED,QAAS,GAAKE,OAAQ,CAAEC,SAAU,OAC7EC,EAAcL,YAAU,CAAEC,QAAS,EAAGC,KAAM,CAAED,QAAS,GAAKE,OAAQ,CAAEC,SAAU,QAChFE,EAAcN,YAAU,CAAEC,QAAS,EAAGC,KAAM,CAAED,QAAS,KAE7D,OAIE,yBAAKhB,UAAU,UACb,kBAAC,IAASsB,IAAV,CAAcC,MAAOT,EAAUd,UAAU,QACvC,kBAAC,EAAD,CAAQE,MAAM,mBACd,kBAAC,EAAD,CAAQA,MAAM,mBACd,kBAAC,EAAD,CAAaA,MAAM,mBACnB,kBAAC,EAAD,CAAQA,MAAM,mBACd,kBAAC,EAAD,CAAQA,MAAM,oBAEhB,kBAAC,IAASoB,IAAV,CAAcC,MAAOH,EAAapB,UAAU,SAC1C,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAUK,SAAS,uEAErB,yBAAKL,UAAU,kBACb,kBAAC,EAAD,CAAOO,MAAM,gTAGf,yBAAKP,UAAU,yBACb,kBAAC,EAAD,CAAOO,MAAM,mGAEf,yBAAKP,UAAU,wBACb,kBAAC,EAAD,CAAOO,MAAM,2GAGjB,kBAAC,IAASe,IAAV,CAAcC,MAAOF,EAAarB,UAAU,SACxC,kBAAC1B,EAAD,OAEJ,yBAAK0B,UAAU,UACb,kBAAC,EAAD,CAAOO,MAAM,8EACb,yBAAKP,UAAU,cACb,kBAAC,EAAD,CAAQS,KAAK,iBAAiBE,MAAM,UAAUD,KAAK,2DACnD,kBAAC,EAAD,CAAQD,KAAK,gBAAgBE,MAAM,SAASD,KAAK,4CACjD,kBAAC,EAAD,CAAQD,KAAK,mBAAmBE,MAAM,YAAYD,KAAK,S,MC/CjEc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.419e4459.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api'\n\n\nconst addUser = async info => {\n  const prefix = '+1'\n  let mainNumber = info.phoneNumber\n  let number = prefix.concat(mainNumber)\n\n  let user = {\n    name: info.firstname,\n    number: number\n  }\n  \n  // console.log(`user: ${JSON.stringify(user)}`)\n  const response = await axios.post(baseUrl, user)\n  return response.data\n}\n\n\n\nexport default { addUser }","import React, { useEffect, useRef } from 'react'\nimport { ConversationalForm } from 'conversational-form'\nimport newUser from '../services/newUser'\nimport '../styles/main.css'\n\nexport default function CForm() {\n  const ref = useRef();\n\n  // Defining the form inputs\n  const formFields = [\n    {\n      'tag': 'cf-robot-message',\n      'type': 'text',\n      'name': 'greeting_1',\n      'cf-questions': 'Yo what\\'s going on? It\\'s The Boy, a.k.a. Drake 🌎'\n    },\n    {\n      'tag': 'cf-robot-message',\n      'type': 'text',\n      'name': 'greeting_2',\n      'cf-questions': 'In case you were wondering, I\\'m still making the final tweaks to C.L.B. 🌹'\n    },\n    {\n      'tag': 'cf-robot-message',\n      'type': 'text',\n      'name': 'greeting_3',\n      'cf-questions': 'But to make it up to you as a fan, I will personally text you once I drop C.L.B. 💽'\n    },\n    // {\n    //   'tag': 'select',\n    //   'name': 'continue',\n    //   'cf-questions': 'How does that sound?',\n    //   'children': [\n    //     {\n    //       'tag': 'option',\n    //       'cf-label': 'Sounds good!',\n    //       'value': 'yes'\n    //     },\n    //     {\n    //       'tag': 'option',\n    //       'cf-label': 'No thank you',\n    //       'value': 'no'\n    //     }\n    //   ]\n    // },\n    {\n      'tag': 'input',\n      'type': 'text',\n      'name': 'firstname',\n      'id': 'firstname',\n      'required': '',\n      'minlength': '3',\n      'maxlength': '15',\n      'cf-questions': \"First off, do you have name or nickname you go by?\",\n      'cf-input-placeholder': \"Eg. The Boy\",\n      'cf-error': '3 - 15 characters',\n      // 'cf-conditional-continue': 'yes'\n    },\n    {\n      'tag': 'cf-robot-message',\n      'type': 'text',\n      'name': 'greeting_4',\n      'cf-questions': \"Nice to meet you {firstname}! 🤝\",\n      'cf-conditional-continue': 'yes'\n    },\n    {\n      'tag': 'input',\n      'type': 'tel',\n      'pattern': \"[0-9]{10}\",\n      'name': 'phoneNumber',\n      'id': 'phoneNumber',\n      'required': '',\n      'minlength': '10',\n      'maxlength': '10',\n      'cf-questions': \"So {firstname}, what is your cell phone number?\",\n      'cf-input-placeholder': \"10 digit Eg. 4161234567\",\n      'cf-error': '10 digit number no dashes'\n    },\n    {\n      'tag': 'cf-robot-message',\n      'type': 'text',\n      'name': 'adding_Contact_Info_1',\n      'cf-questions': \"Alright {firstname}! Give me a minute to verify and add you to my contacts ⏳\"\n    },\n    // {\n    //   'tag': 'cf-robot-message',\n    //   'name': 'ending',\n    //   'cf-conditional-continue': 'no',\n    //   'cf-questions': 'No biggie ✌🏼'\n    // },\n  ]\n\n  useEffect(function mount() {\n    \n    // Submitting the form\n    async function submitCallback() {\n      let newUserInfo = cf.getFormData(true)\n\n      let response = await newUser.addUser(newUserInfo)\n\n      if (response === \"Invalid number\"){\n        cf.addRobotChatResponse(\"This is an invalid Canadian 🇨🇦 / American 🇺🇸 cell phone number {firstname} 😂\")\n        cf.addRobotChatResponse(\"KMT ... I took a break from C.L.B., now it's back to that, {firstname} ✌🏼\")\n      } else if (response === \"Non-unique number\"){\n        cf.addRobotChatResponse(\"You must love talking with me {firstname} 😂\")\n        cf.addRobotChatResponse(\"You've already subscribed to the C.L.B. Hotline ✍🏼\")\n        cf.addRobotChatResponse(\"I gotta get back to C.L.B., but until next time {firstname} ✌🏼\")\n      } else{\n        cf.addRobotChatResponse(\"Woi Oi! You've been subscribed! 💘\")\n        cf.addRobotChatResponse(`I'll send out a confirmation text from ${response.secret} shortly 📱`)\n        cf.addRobotChatResponse(`If you change your mind just text 'TAKECARE' to ${response.secret} to unsubscribe`)\n        // cf.addRobotChatResponse(\"Also expect a text from the same number once C.L.B. drops 🔥\")\n        // cf.addRobotChatResponse(\"In the meantime there will be notifications for other album drops I'm excited for 🎶\")\n        // cf.addRobotChatResponse(\"Artists like Playboi Carti & Mariah the Scientist 🔥\")\n        cf.addRobotChatResponse(\"I gotta get back to C.L.B., but until next time {firstname} ✌🏼\")\n      }\n    }\n\n    let cf = ConversationalForm.startTheConversation({\n      options: {\n        theme: 'dark',\n        context: ref.current,\n        preventAutoFocus: false,\n        // preventAutoStart: true,\n        // showProgressBar: true,\n        submitCallback: () => {submitCallback()},\n        userImage: 'https://pbs.twimg.com/profile_images/563843814725402624/Vb8k670S_400x400.png',\n        robotImage: 'https://i.redd.it/moigifebc3341.jpg',\n        userInterfaceOptions: {\n          robot: {\n            // robotResponseTime: 1000,\n          },\n          // user: {\n          //   showThinking: true,\n          // }\n        },\n        loadExternalStyleSheet: true\n      },\n      tags: formFields,\n    })\n\n    // ref.current.appendChild(cf.el);\n\n    return function unMount() {\n      cf.remove();\n    }\n  }, [formFields])\n\n\n  return (\n      <div className='CForm' ref={ref}/>\n  )\n}","import React from 'react'\nimport '../styles/main.css'\n\nconst Header = ({ title }) => {\n  return (\n    <h1 className='outlineText'><i>{title}</i></h1>\n  )\n}\n\nexport default Header","import React from 'react'\nimport '../styles/main.css'\n\nconst SolidHeader = ({ title }) => {\n  return (\n    <h1 className='solidText'><i>{title}</i></h1>\n  )\n}\n\nexport default SolidHeader","import React from 'react'\nimport '../styles/main.css'\n\nconst Question = ({ question }) => {\n  return (\n    <h2 className='contrast'><i>{question}</i></h2>\n  )\n}\n\nexport default Question","import React from \"react\"\nimport '../styles/main.css'\n\nconst Blurb = ({ blurb }) => {\n  return <p className='contrast'>{blurb}</p>\n}\n\nexport default Blurb","import React from 'react'\nimport '../styles/main.css'\n\nconst Footer = ({ icon, link, label }) => {\n  return (\n    <div className='icon'>\n      <a href={link}><i className={icon}></i></a>\n      <p>{label}</p>\n    </div>\n  )\n}\n\nexport default Footer","import React from 'react'\nimport CForm from './components/CForm'\nimport {useSpring, animated} from 'react-spring'\nimport Header from './components/Header'\nimport SolidHeader from './components/SolidHeader'\nimport Question from './components/Question'\nimport Blurb from './components/Blurb'\nimport Footer from './components/Footer'\nimport './styles/main.css'\n\nfunction App() {\n  // define spring\n  // const propsTop = useSpring({ opacity: 1, from: { opacity: 0 }, config: { mass: 25 } })\n  const propsTop = useSpring({ opacity: 1, from: { opacity: 0 }, config: { duration: 3000 } })\n  const propsMiddle = useSpring({ opacity: 1, from: { opacity: 0 }, config: { duration: 3500 } })\n  const propsBottom = useSpring({ opacity: 1, from: { opacity: 0 }, })\n  \n  return (\n    // <div className=\"parent\">\n    //   <CForm className='conversational-form'/>\n    // </div>\n    <div className='parent'>\n      <animated.div style={propsTop} className='logo'>\n        <Header title='C.L.B. HOTLINE' />\n        <Header title='C.L.B. HOTLINE' />\n        <SolidHeader title='C.L.B. HOTLINE' />\n        <Header title='C.L.B. HOTLINE' />\n        <Header title='C.L.B. HOTLINE' />\n      </animated.div>\n      <animated.div style={propsMiddle} className=\"pitch\">\n        <div className=\"ms-word-center\">\n          <Question question=\"Growing impatient for the release of Drake's Certified Lover Boy?\" />\n        </div>\n        <div className=\"ms-word-center\">\n          <Blurb blurb='C.L.B. Hotline is a simple web app built to solve this very problem. The app will send subscribers an SMS text mesage to their phone once the album is available on streaming platforms. Currently only Canadian and U.S. mobile numbers are supported 🇨🇦 & 🇺🇸' />\n          {/* <Blurb blurb='If you are still on the fence like Mr. Feeny please check how it all works by cliking here 💡' /> */}\n        </div>\n        <div className=\"ms-word-center bottom\">\n          <Blurb blurb='Feel free to subscribe with the interactive onboarding process below 👇🏾' />\n        </div>\n        <div className=\"ms-word-center right\">\n          <Blurb blurb='Feel free to subscribe with the interactive onboarding process to the right 👉🏾' />\n        </div>\n      </animated.div>\n      <animated.div style={propsBottom} className='nocta'>\n          <CForm />\n      </animated.div>\n      <div className=\"footer\">\n        <Blurb blurb='Designed and Built by Nishoake 👨🏾‍💻' />\n        <div className=\"footerIcon\">\n          <Footer icon='fab fa-spotify' label='Spotify' link='https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4' />\n          <Footer icon='fab fa-github' label='GitHub' link='https://github.com/Nishoake/CLB_Hotline' />\n          <Footer icon='fab fa-instagram' label='Instagram' link='' />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}